Smart Chilaka
--- ./linux-5.1-original/kernel/sys.c	2019-05-05 20:42:58.000000000 -0400
+++ ./linux-5.1/kernel/sys.c	2020-04-15 13:06:58.827206685 -0500
@@ -1,3 +1,4 @@
+
 // SPDX-License-Identifier: GPL-2.0
 /*
  *  linux/kernel/sys.c
@@ -28,6 +29,7 @@
 #include <linux/suspend.h>
 #include <linux/tty.h>
 #include <linux/signal.h>
+
 #include <linux/cn_proc.h>
 #include <linux/getcpu.h>
 #include <linux/task_io_accounting_ops.h>
@@ -2584,6 +2586,13 @@
 	return 0;
 }
 
+
+SYSCALL_DEFINE0(helloworld)
+{
+	printk("helloworld");
+	return 0;
+}
+

+SYSCALL_DEFINE1(getPageInfo, int, targetPid)
+{
+        struct task_struct *p;
+        struct mm_struct *mms = NULL;
+        struct vm_area_struct *vas = NULL;+
+
+        /*
+         int present;
+         int dirty;
+         int reference;
+         unsigned long address;
+         */ 
+         int index = 1;
+ 
+         if(!(p = find_task_by_vpid(targetPid))){
+                 printk("Can not find the task %d\n\n", targetPid);
+                 return 0;
+         } else {
+                 printk("Find the task %d\n\n", targetPid);
+ 		if(p != NULL)
+                 	mms = p->mm;
+ 		if(mms != NULL)
+                 	vas = mms->mmap;
+         }
+         while(vas != NULL){
+           pgd_t *pgd = pgd_offset(mms, vas->vm_start);//page global directory
+           p4d_t *p4d; 
+           pud_t *pud; //page upper directory
+           pmd_t *pmd; //page middle directory
+           pte_t *pte; //page table entry
+ 
+                 if(!pgd || pgd_none(*pgd) || pgd_bad(*pgd)) {
+                 	vas = vas->vm_next;
+                 	continue;
+                 }
+                 p4d = p4d_offset(pgd, vas->vm_start);
+ 
+                 if(!p4d ||p4d_none(*p4d) || p4d_bad(*p4d)){
+                         vas = vas->vm_next;
+                         continue;
+                 }
+                 pud = pud_offset(p4d, vas->vm_start);
+ 
+                 if(!pud ||pud_none(*pud) || pud_bad(*pud)){
+                         vas = vas->vm_next;
+                         continue;
+                 }
+                 pmd = pmd_offset(pud, vas->vm_start);
+ 
+                 if(!pmd || pmd_none(*pmd) || pmd_bad(*pmd)){
+                         vas = vas->vm_next;
+                       continue;
+                 }
+                 pte = pte_offset_map(pmd, vas->vm_start);
+              if(!pte ||!pte_none(*pte)){
+          printk("This is %d vm_area_struct\n", index++);
+      printk("the page is%sin the memory!\n",pte_present(*pte) == 1 ? " " : " not ");
       printk("the page is%sreferenced!\n", pte_young(*pte) == 1 ? " " : " not ");
       printk("the page is%smodified!\n", pte_dirty(*pte) == 1 ? " " : " not ");
+
+            	}
+                vas = vas->vm_next;
+        }
+
+ 	printk("Lookup is finished\n");+ 
+ 
+         return 0;
+ }
+ 

 #ifdef CONFIG_COMPAT
 struct compat_sysinfo {
 	s32 uptime;
